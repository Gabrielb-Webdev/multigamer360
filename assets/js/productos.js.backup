// Funciones de productos.js - Versi√≥n simplificada

// Variables globales para filtros
window.pendingFilters = {
    categories: [],
    brands: [],
    tags: [],
    minPrice: '',
    maxPrice: ''
};
window.filtersChanged = false;

// Funci√≥n que se ejecuta cuando la p√°gina est√° completamente cargada
document.addEventListener('DOMContentLoaded', function() {
    console.log('üõçÔ∏è P√°gina de productos cargada (versi√≥n simplificada)');
    
    // Verificar elementos de productos
    const productsGrid = document.getElementById('products-grid');
    if (!productsGrid) {
        console.error('‚ùå No se encontr√≥ el grid de productos');
        return;
    }
    
    console.log('üì¶ Grid de productos encontrado con', productsGrid.children.length, 'elementos');
    
    // Inicializar im√°genes de producto
    initializeProductImages();
});

// Funci√≥n para inicializar las im√°genes de productos
function initializeProductImages() {
    try {
        const productBackgrounds = document.querySelectorAll('.product-image-background');
        console.log(`üñºÔ∏è Procesando ${productBackgrounds.length} im√°genes de productos`);
        
        if (productBackgrounds.length === 0) {
            console.warn('‚ö†Ô∏è No se encontraron im√°genes de productos');
        }
        
        // Procesar cada imagen de fondo
        productBackgrounds.forEach((bg, index) => {
            if (!bg) return;
            
            // Obtener la URL de la imagen y el fallback
            const style = window.getComputedStyle(bg);
            const currentBg = style.backgroundImage;
            const fallbackUrl = bg.getAttribute('data-fallback') || 'assets/images/products/product1.jpg';
            
            // Si no hay imagen de fondo, establecer el fallback
            if (!currentBg || currentBg === 'none') {
                bg.style.backgroundImage = `url('${fallbackUrl}')`;
                console.log(`üìù Imagen #${index} - Usando fallback`);
            } else {
                console.log(`‚úì Imagen #${index} - OK`);
            }
        });
        
        console.log('‚úÖ Inicializaci√≥n de im√°genes completada');
    } catch (error) {
        console.error('‚ùå Error al inicializar im√°genes de producto:', error);
    }
}

// Funci√≥n para aplicar filtros
function applyFilters() {
    try {
        console.log('üîç Aplicando filtros...');
        
        // Construir URL con los filtros seleccionados
        const url = new URL(window.location.href);
        
        // Limpiar par√°metros existentes
        url.searchParams.delete('category');
        url.searchParams.delete('brand');
        url.searchParams.delete('tags[]');
        url.searchParams.delete('min_price');
        url.searchParams.delete('max_price');
        url.searchParams.delete('page');
        
        // Agregar filtros a la URL
        if (window.pendingFilters.categories.length > 0) {
            url.searchParams.set('category', window.pendingFilters.categories[0]);
        }
        
        if (window.pendingFilters.brands.length > 0) {
            url.searchParams.set('brand', window.pendingFilters.brands[0]);
        }
        
        window.pendingFilters.tags.forEach(tag => {
            url.searchParams.append('tags[]', tag);
        });
        
        if (window.pendingFilters.minPrice) {
            url.searchParams.set('min_price', window.pendingFilters.minPrice);
        }
        
        if (window.pendingFilters.maxPrice) {
            url.searchParams.set('max_price', window.pendingFilters.maxPrice);
        }
        
        // Redirigir a la nueva URL con filtros
        console.log('üîÑ Redirigiendo a URL con filtros:', url.toString());
        window.location.href = url.toString();
    } catch (error) {
        console.error('‚ùå Error al aplicar filtros:', error);
    }
}

// Funci√≥n para actualizar filtro
function updateFilter(type, value, checked) {
    try {
        if (!window.pendingFilters) {
            console.error('‚ùå pendingFilters no est√° inicializado');
            return;
        }
        
        console.log('üìù Actualizando filtro:', type, value, checked);
        
        if (type === 'category') {
            if (checked) {
                if (!window.pendingFilters.categories.includes(value)) {
                    window.pendingFilters.categories = [value]; // Solo permitir una categor√≠a a la vez
                }
            } else {
                window.pendingFilters.categories = window.pendingFilters.categories.filter(cat => cat !== value);
            }
        } else if (type === 'brand') {
            if (checked) {
                if (!window.pendingFilters.brands.includes(value)) {
                    window.pendingFilters.brands = [value]; // Solo permitir una marca a la vez
                }
            } else {
                window.pendingFilters.brands = window.pendingFilters.brands.filter(brand => brand !== value);
            }
        }
        
        window.filtersChanged = true;
        updateFilterButtons();
    } catch (error) {
        console.error('‚ùå Error al actualizar filtro:', error);
    }
}

// Funci√≥n para actualizar botones de filtros
function updateFilterButtons() {
    try {
        const applyBtn = document.getElementById('apply-filters-btn');
        const clearBtn = document.getElementById('clear-filters-btn');
        const filterCount = document.getElementById('filter-count');
        
        if (!applyBtn || !clearBtn) {
            console.warn('‚ö†Ô∏è No se encontraron botones de filtro');
            return;
        }
        
        // Calcular n√∫mero total de filtros activos
        const totalFilters = 
            window.pendingFilters.categories.length + 
            window.pendingFilters.brands.length + 
            window.pendingFilters.tags.length + 
            (window.pendingFilters.minPrice ? 1 : 0) + 
            (window.pendingFilters.maxPrice ? 1 : 0);
        
        // Mostrar u ocultar botones seg√∫n filtros activos
        if (window.filtersChanged && totalFilters > 0) {
            applyBtn.style.display = 'block';
            clearBtn.style.display = 'block';
            
            if (filterCount) {
                filterCount.textContent = totalFilters;
                filterCount.style.display = 'inline';
            }
        } else {
            applyBtn.style.display = 'none';
            
            if (totalFilters === 0) {
                clearBtn.style.display = 'none';
            }
            
            if (filterCount) {
                filterCount.style.display = 'none';
            }
        }
    } catch (error) {
        console.error('‚ùå Error al actualizar botones de filtro:', error);
    }
}